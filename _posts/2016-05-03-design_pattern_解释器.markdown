---
layout:     post
title:      "Design Pattern 解释器"
subtitle:   "解释器"
author:     "Jason Tang"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - 设计模式 解释器 
---

> 解释器模式描述了如何构成一个简单的语言解释器，主要应用在使用面向对象语言开发的编译器中。

##模式定义

> 解释器模式(Interpreter Pattern)定义：定义语言的文法，并且建立一个解释器来解释该语言中的句子，这里的“语言”指的是使用规定格式和语法的代码，它是一种类行为型模式。

##模式结构

![命令模式UML][1]

[1]:http://my.csdn.net/uploads/201206/15/1339734799_8167.jpg

|角色|详细|
|--|--|
|AbstractExpression|声明了抽象的解释操作，它是所有的终结符表达式和非终结符表达式的公共父类|
|TerminalExpression|实现了与文法中的终结符相关联的解释操作，在句子中的每一个终结符都是该类的一个实例。|
|NonterminalExpression|实现了文法中非终结符的解释操作，由于在非终结符表达式中可以包含终结符表达式，也可以继续包含非终结符表达式，因此该解释操作一般通过递归的方式来完成。|
|Context|用于存储解释器之外的一些全局信息，通常它临时存储了需要解释的语句|
|Client|在客户类中构造了表示该文法定义的语言中一个特定句子的抽象语法树，该抽象语法树由非终结符表达式和终结符表达式实力组合而成，在客户类中还将调用解释操作，实现对句子的解释。有时候为简化客户类的代码，可以将抽象语法树的构造工作封装到专门的类中完成，客户端只需要提供待解释的句子并调用该类的解释操作即可，该类可以称为解释器封装类。|

##优缺点

###优点

* 易于改变和拓展文法，可以通过继承机制来改变或拓展文法，实现简单语言方便。
* 易于实现文法。
* 可以让用户较为方便地增加新类型的表达式，增加新的表达式时无须对现有表达式类进行修改。

###缺点

* 对于复杂文法难以维护。在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，则可能难以管理和维护，此时可以考虑使用语法分析程序等方式取代解释器模式。
* 执行效率低，因为大量使用循环和递归调用。
* 应用场景有限。
